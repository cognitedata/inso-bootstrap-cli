#
# GROUPS with injected capability sets
#
projects:
  - name: equinor-dev
    groups:
      - name: cdf:uc:001:demand:owner
        # capabilties: .. # support for plain api-level definition? Or enforce `capability-sets`?`
        capability-sets: [uc-001-owner, canvas] # acl + scopes + actions
        metadata:
          Dataops_created: "2024-01-12 10:23:31"
          Dataops_source: bootstrap-cli v3.3.0
          idp_source_id: acd2fe35-aa51-45a7-acef-0d54e2b6b6a8
          idp_source_name: CDF_DEV_ALLPROJECTS_READ
        sourceId: acd2fe35-aa51-45a7-acef-0d54e2b6b6a8

      - name: cdf:root
        capability-sets: [governance] # acl + scopes + actions
        metadata:
          Dataops_created: "2024-01-12 10:23:31"
          Dataops_source: bootstrap-cli v3.3.0
          idp_source_id: acd2fe35-aa51-45a7-acef-0d54e2b6b6a8
          idp_source_name: CDF_DEV_ALLPROJECTS_READ
        sourceId: acd2fe35-aa51-45a7-acef-0d54e2b6b6a8

#
# ACTION
#
action-sets:
  - name: OWNER
    description: ""
    action-mapping:
      annotationsAcl: [READ, WRITE, SUGGEST, REVIEW]
      datasetsAcl: [READ, OWNER]
      groupsAcl: [LIST]
      projectsAcl: [LIST]
      rawAcl: [READ, WRITE, LIST]
      roboticsAcl: [READ, CREATE, UPDATE, DELETE]
      sessionsAcl: [LIST, CREATE]
      threedAcl: [READ, CREATE, UPDATE, DELETE]
      documentFeedbackAcl: [READ, CREATE, DELETE]
      _: [READ, WRITE] # default

  # - name: WRITE
  # no WRITE set (yet), expecting OWNER with additional READ is enough

  - name: READ
    description: ""
    action-mapping:
      rawAcl: [READ, LIST]
      groupsAcl: [LIST]
      projectsAcl: [LIST]
      sessionsAcl: [LIST]
      _: [READ]

  - name: GOVERNANCE
    description: ""
    action-mapping:
      datasetsAcl: [READ, WRITE, OWNER]
      groupsAcl: [LIST, READ, CREATE, UPDATE, DELETE]
      # TODO can space scope creation be limted to root-accoun
      # dataModels: [READ, WRITE]
      securityCategoriesAcl: [MEMBEROF, LIST, CREATE, DELETE]
      projectsAcl: [READ, UPDATE, LIST]

#
# ACLs
#   one automatic acl-set with exact name of each ACL is automatically available
#   to avoid creating a set for a single acl only
#   like
#   - name: dataModels
#     explicit: [dataModels]
acl-sets:
  - name: with-scoping
    description: ""
    compose: [] # other acl-sets
    exclude: [] # substract sets or explict?
    explicit: # acls
      - assetsAcl
      - dataModelInstancesAcl
      - dataModelsAcl
      - datasetsAcl
      - eventsAcl
      - extractionConfigsAcl
      - extractionPipelinesAcl
      - extractionRunsAcl
      - filesAcl
      - groupsAcl
      - labelsAcl
      - rawAcl
      - relationshipsAcl
      - roboticsAcl
      - sequencesAcl
      - templateGroupsAcl
      - templateInstancesAcl
      - threedAcl
      - timeSeriesAcl
      - transformationsAcl

  - name: without-scoping
    description: ""
    compose: [] # other acl-sets
    exclude: [] # substract sets or explict?
    explicit: # acls
      - annotationsAcl
      - digitalTwinAcl
      - entitymatchingAcl
      - functionsAcl
      - geospatialAcl
      - geospatialCrsAcl
      - projectsAcl
      - seismicAcl
      - sessionsAcl
      - timeSeriesSubscriptionsAcl
      - typesAcl
      - wellsAcl
      # undocumented acls
      - documentFeedbackAcl
      - documentPipelinesAcl
      - monitoringTasksAcl
      - notificationsAcl
      - workflowOrchestrationAcl

  - name: user
    description: ""
    compose:
      - with-scoping
      - without-scoping

  - name: governance
    description: ""
    explicit:
      - datasetsAcl
      - groupsAcl
      - projectsAcl
      # TODO: do users have READ access here?
      - securityCategoriesAcl

#
# SCOPES
#
scope-sets:
  - name: unscoped
    description: ""
    all-scope: true

  - name: canvas
    description: ""
    explicit:
      spaces:
        - name: cdf_apps_shared
        - name: cdf_industrial_canvas
        - name: IndustrialCanvasInstanceSpace
        - name: CommentInstanceSpace

  - name: infield-common-model
    description: required by guest, normal and admin
    explicit:
      spaces:
        - name: APM_Config
        - name: cdf_apm
        - name: cdf_infield
        - name: cdf_core
        - name: cdf_apps_shared

  - name: infield-common-instances
    description: required by guest, normal and admin
    explicit:
      spaces:
        - name: APM_Config
        - name: cdf_apm
        - name: cognite_app_data

  - name: infield-guest-instances
    description: required by guest
    explicit:
      spaces:
        - name: cognite_app_data

  - name: infield-admin-instances
    description: required by admin
    explicit:
      spaces:
        - name: APM_Config

  - name: infield-rb-location-instances
    description: custom scope for rb:?? or in:??
    explicit:
      spaces:
        - name: dp-006-rb-mongstad-spc
        - name: dp-007-rb-sture-spc

  - name: src-all
    description: ""
    all-scope: false # default
    explicit:
      rawdbs:
        - name: src:all:db
      spaces:
        - name: src-all-spc
      datasets:
        - name: src:all

  - name: in-all
    description: ""
    # compose: [foobar]
    all-scope: false # default
    explicit:
      rawdbs:
        - name: in:all:db
      spaces:
        - name: in-all-spc
      datasets:
        - name: in:all

  - name: in-001
    description: ""
    all-scope: false # default
    compose: [src-all, in-all]
    exclude: []
    explicit:
      rawdbs:
        - name: src:001:sap:db
        - name: src:001:sap:db:state
        - name: src:002:weather:db
        - name: src:003:openint:db
        - name: src:004:test:db
      spaces:
        - name: src-001-sap-spc
        - name: src-002-weather-spc
        - name: src-003-openint-spc
        - name: src-004-test-spc
      datasets:
        - name: src:001:sap
        - name: src:002:weather
        - name: src:003:openint
        - name: src:004:test

  - name: uc-001
    description: ""
    all-scope: false # default
    explicit:
      rawdbs:
        - name: uc:001:vessel:db
        - name: uc:001:vessel:db:state
      spaces:
        - name: uc-001-vessel-spc
      datasets:
        - name: uc:001:vessel

#
# CAPABILITY sets, combining ACL and SCOPES with ACTIONS
#
capability-sets:
  - name: governance
    description: ""
    compose: []
    exclude: []
    capabilities:
      - acls: [governance]
        scopes: [unscoped]
        actions: [GOVERNANCE]

  - name: canvas
    description: ""
    compose: []
    exclude: []
    capabilities:
      - acls: [dataModelsAcl]
        scopes: [canvas]
        actions: [READ]
      - acls: [dataModelInstancesAcl]
        scopes: [canvas]
        actions: [OWNER]

  - name: infield-common
    description: ""
    compose: []
    exclude: []
    capabilities:
      - acls: [dataModelsAcl]
        scopes: [infield-common-model]
        actions: [READ]
      - acls: [dataModelInstancesAcl]
        scopes: [infield-common-instances]
        actions: [READ]
      - acls: [dataModelInstancesAcl]
        scopes: [infield-guest-instances]
        actions: [OWNER]

  - name: infield-admin
    description: "additional write permission to admin instance space"
    compose: [infield-common]
    capabilities:
      - acls: [dataModelInstancesAcl]
        scopes: [infield-admin-instances]
        actions: [OWNER]

  - name: infield-rb-user
    description: ""
    compose: [infield-common]
    capabilities:
      - acls: [dataModelInstancesAcl]
        scopes: [infield-rb-location-instances]
        actions: [OWNER]

  - name: in-001-owner
    description: ""
    compose: []
    exclude: []
    capabilities:
      # governance scoped and READ only
      - acls: [governance]
        scopes: [in-001]
        actions: [READ]
      - acls: [user]
        scopes: [in-001]
        actions: [OWNER]

  - name: uc-001-owner
    description: ""
    capabilities:
      # governance scoped and READ only
      - acls: [governance]
        scopes: [uc-001]
        actions: [READ]
      - acls: [user]
        scopes: [uc-001]
        actions: [OWNER]
